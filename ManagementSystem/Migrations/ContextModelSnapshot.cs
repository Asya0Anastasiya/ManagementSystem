// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserService.Data;

#nullable disable

namespace UserService.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UserService.Models.Entities.AdressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Strit")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("Adresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74c7e715-7af4-41e4-a081-1588550cb9ef"),
                            City = "Hrodna",
                            Country = "Belarus",
                            HouseNumber = "3",
                            Strit = "Repina"
                        });
                });

            modelBuilder.Entity("UserService.Models.Entities.BranchOfficeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("983662f2-fd59-4ce6-8241-dc7cb879d2dc"),
                            AdressId = new Guid("74c7e715-7af4-41e4-a081-1588550cb9ef"),
                            Name = "iTech-Art.Hrodno"
                        });
                });

            modelBuilder.Entity("UserService.Models.Entities.DepartmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchOfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96b89eee-cc6d-41a9-bfe2-13d8cc7afb62"),
                            BranchOfficeId = new Guid("983662f2-fd59-4ce6-8241-dc7cb879d2dc"),
                            Name = "Back-end Development"
                        });
                });

            modelBuilder.Entity("UserService.Models.Entities.PositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ac1ec21-6231-4c69-a508-15c1e99ff235"),
                            DepartmentId = new Guid("96b89eee-cc6d-41a9-bfe2-13d8cc7afb62"),
                            Name = ".Net Developer"
                        });
                });

            modelBuilder.Entity("UserService.Models.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("UserImage")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5842e31-2f98-409b-2cd6-08dbbf946b0b"),
                            Email = "Eva@gmail.com",
                            FirstName = "Eva",
                            LastName = "Cassidy",
                            Password = "$2a$11$.hZl.BNBmGHlNvLcADCKyeswAYtHB3pE1kbM22ksSI3Q8eBYOrAh.",
                            PhoneNumber = "+375295647467",
                            PositionId = new Guid("6ac1ec21-6231-4c69-a508-15c1e99ff235"),
                            Role = 1
                        });
                });

            modelBuilder.Entity("UserService.Models.Entities.BranchOfficeEntity", b =>
                {
                    b.HasOne("UserService.Models.Entities.AdressEntity", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("UserService.Models.Entities.DepartmentEntity", b =>
                {
                    b.HasOne("UserService.Models.Entities.BranchOfficeEntity", "BranchOffice")
                        .WithMany("Departments")
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchOffice");
                });

            modelBuilder.Entity("UserService.Models.Entities.PositionEntity", b =>
                {
                    b.HasOne("UserService.Models.Entities.DepartmentEntity", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UserService.Models.Entities.UserEntity", b =>
                {
                    b.HasOne("UserService.Models.Entities.PositionEntity", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("UserService.Models.Entities.BranchOfficeEntity", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("UserService.Models.Entities.DepartmentEntity", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
